<h1>Paste

<h2>Usage:
<pre>
    &lt;command&gt; | curl -F 'file=@-' -H 'Expect:' #{siteUrl}

<h2>Features:
<ul>
    <li>Very easy to use
    <li>Supports binary files
    <li>Keeps the Content-Type
    <li>Preserves filenames, sent as Content-Disposition
    <li>Optional expiration (self-destruct)

<h2>Details
<p>
    <b>File</b>: Send a POST request to this page with your data in the "file"
    field name, the entire url uploaded is sent back or a HTTP 302
    is replied.

<p>
    <b>Expiration</b>: One can specify the number of minutes after which the
    file should be deleted. Specified by the "expire" field. Alternatively you
    can specify the time unit: <b>s</b>(econds), <b>h</b>(ours), <b>d</b>(ays),
    <b>m</b>(onths).
    Example: 120 (2 minutes), 2m (2 months).

<p>
    <b>Content-Type</b>: It allows the browser or client to infer types of files
    to correctly display them. cURL cannot infer the type of piped input so you
    could explicitly give the content type (1st below) or pass it the file
    directly (2nd below) so it can find the type itself (look at man curl).

<p>
    <b>Content-Disposition</b>: It allows to suggest a filename to the browser.
    That means we can store filenames we received and provide them afterward.
    cURL takes the filename of the path or you can provide it separately (see
    below).

<h2>Examples
<pre>
    curl -F 'file=@/path/to/file' -H 'Expect:' #{siteUrl}
    &lt;command&gt; | curl -F 'file=@-;type=image/jpeg;filename=myphoto.jpg' -H 'Expect:' #{siteUrl}
    &lt;command&gt; | curl -F 'file=@-' -F 'expire=1d' -H 'Expect:' #{siteUrl}

<p>
    <b>Expect</b>: If you are wondering about this Expect, this is a HTTP header
    that our server does not support, so we say cURL not to send
    it and it just works as expected :)

<small>
    There is no guarantee of services of any kind.
    Note your IP address is stored for security reasons.

<footer>
    Coded with <a href="http://www.yesodweb.com/">Yesod</a> in Haskell by Axel Angel for GNU Generation, 2014.
